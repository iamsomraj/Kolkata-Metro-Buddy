{"version":3,"sources":["components/Card/Card.tsx","components/Form/Form.tsx","ColorModeSwitcher.tsx","components/Header/Header.tsx","App.tsx","index.tsx"],"names":["Card","props","onClose","isCentered","isOpen","motionPreset","cardNumber","response","align","justify","balance","toFixed","lastUsedInGateOn","validUpto","variant","startLocation","endLocation","lastUsedInGateAtStn","colorScheme","mr","onClick","onModalClose","Form","useState","setCardNumber","isCardNumberValid","setIsCardNumberValid","balanceResponse","setBalanceResponse","setIsOpen","submitHandler","event","a","preventDefault","localStorage","setItem","JSON","stringify","axios","get","params","reCardNumber","data","useEffect","cardFromStorage","getItem","parse","trim","length","isFinite","parseInt","getCardNumberFromStorage","bg","useColorModeValue","spacing","mx","maxW","py","px","fontSize","as","color","rounded","boxShadow","p","type","isInvalid","value","placeholder","onChange","target","disabled","_hover","ColorModeSwitcher","toggleColorMode","useColorMode","text","SwitchIcon","FaMoon","FaSun","size","marginLeft","icon","Header","minH","base","borderBottom","borderStyle","borderColor","textAlign","useBreakpointValue","md","fontFamily","justifySelf","App","theme","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6b15c67e.chunk.js","sourcesContent":["import {\r\n  Button,\r\n  Modal,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  Spinner,\r\n  Stat,\r\n  StatHelpText,\r\n  StatLabel,\r\n  StatNumber,\r\n  Table,\r\n  TableCaption,\r\n  Tbody,\r\n  Td,\r\n  Tfoot,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { ResponseType } from \"../Form/Form\";\r\n\r\ninterface CardProps {\r\n  cardNumber: string;\r\n  response: null | ResponseType;\r\n  isOpen: boolean;\r\n  onModalClose: React.MouseEventHandler<HTMLButtonElement>;\r\n  onClose: () => void;\r\n}\r\n\r\nconst Card: React.FC<CardProps> = (props) => {\r\n  return (\r\n    <>\r\n      <Modal\r\n        onClose={props.onClose}\r\n        isCentered\r\n        isOpen={props.isOpen}\r\n        motionPreset=\"slideInBottom\"\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Card # {props.cardNumber}</ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            {!props.response && <Spinner />}\r\n            {props.response && (\r\n              <>\r\n                <Stat align={\"center\"} justify={\"center\"}>\r\n                  <StatLabel>Card Balance</StatLabel>\r\n                  <StatNumber>₹ {props.response.balance.toFixed(2)}</StatNumber>\r\n                  <StatHelpText>\r\n                    {props.response.lastUsedInGateOn} -{\" \"}\r\n                    {props.response.validUpto}\r\n                  </StatHelpText>\r\n                </Stat>\r\n                <Table variant=\"simple\">\r\n                  <TableCaption>Card Information</TableCaption>\r\n                  <Thead>\r\n                    <Tr>\r\n                      <Th>Description</Th>\r\n                      <Th>Value</Th>\r\n                    </Tr>\r\n                  </Thead>\r\n                  <Tbody>\r\n                    <Tr>\r\n                      <Td>starting location</Td>\r\n                      <Td>{props.response.startLocation}</Td>\r\n                    </Tr>\r\n                    <Tr>\r\n                      <Td>ending location</Td>\r\n                      <Td>{props.response.endLocation}</Td>\r\n                    </Tr>\r\n                    <Tr>\r\n                      <Td>card last used at</Td>\r\n                      <Td>{props.response.lastUsedInGateAtStn}</Td>\r\n                    </Tr>\r\n                  </Tbody>\r\n                  <Tfoot>\r\n                    <Tr>\r\n                      <Th>Description</Th>\r\n                      <Th>Value</Th>\r\n                    </Tr>\r\n                  </Tfoot>\r\n                </Table>\r\n              </>\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button colorScheme=\"blue\" mr={3} onClick={props.onModalClose}>\r\n              Close\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n\r\n// <Stat>\r\n//                   <StatLabel>Balance</StatLabel>\r\n//                   <StatNumber>₹ {props.response.balance.toFixed(2)}</StatNumber>\r\n//                 </Stat>\r\n//                 <Stat>\r\n//                   <StatLabel>Starting Location</StatLabel>\r\n//                   <StatNumber>\r\n//                     {props.response.startLocation.trim().toLowerCase()}\r\n//                   </StatNumber>\r\n//                 </Stat>\r\n//                 <Stat>\r\n//                   <StatLabel>Ending Location</StatLabel>\r\n//                   <StatNumber>\r\n//                     {props.response.endLocation.trim().toLowerCase()}\r\n//                   </StatNumber>\r\n//                 </Stat>\r\n//                 <Stat>\r\n//                   <StatLabel>Last Used In Station</StatLabel>\r\n//                   <StatNumber>{props.response.lastUsedInGateAtStn}</StatNumber>\r\n//                 </Stat>\r\n//                 <Stat>\r\n//                   <StatLabel>Validity</StatLabel>\r\n//                   <StatNumber>{props.response.validUpto}</StatNumber>\r\n//                 </Stat>\r\n//                 <Stat>\r\n//                   <StatLabel>Balance</StatLabel>\r\n//                   <StatNumber>{props.response.balance}</StatNumber>\r\n//                 </Stat>\r\n","/* eslint-disable react/jsx-no-undef */\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  FormControl,\r\n  FormLabel,\r\n  Heading,\r\n  Input,\r\n  Stack,\r\n  Text,\r\n  useColorModeValue,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport Card from \"../Card/Card\";\r\n\r\nexport interface ResponseType {\r\n  balance: Number;\r\n  cardNumber: String;\r\n  endLocation: string;\r\n  endLocationIndex: number;\r\n  fmiNumber: string;\r\n  lastUsedInGateAtStn: string;\r\n  lastUsedInGateOn: string;\r\n  startLocation: string;\r\n  startLocationIndex: number;\r\n  statusCode: number;\r\n  strLastUsedInGateOn: string;\r\n  strValidUpto: string;\r\n  validUpto: string;\r\n}\r\n\r\nconst Form: React.FC = () => {\r\n  const [cardNumber, setCardNumber] = useState(\"\");\r\n  const [isCardNumberValid, setIsCardNumberValid] = useState(false);\r\n  const [balanceResponse, setBalanceResponse] = useState<null | ResponseType>(\r\n    null\r\n  );\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const onModalCloseHandler: React.MouseEventHandler<HTMLButtonElement> =\r\n    () => {\r\n      onClose();\r\n    };\r\n\r\n  const onClose = () => {\r\n    setIsOpen(false);\r\n  };\r\n\r\n  const submitHandler: React.MouseEventHandler<HTMLButtonElement> = async (\r\n    event\r\n  ) => {\r\n    event.preventDefault();\r\n    if (isCardNumberValid) {\r\n      localStorage.setItem(\"cardNumber\", JSON.stringify(cardNumber));\r\n      const response = await axios.get(\r\n        \"https://mtp.indianrailways.gov.in/KolkataMetroPG/CardBalanceAction.jsp\",\r\n        {\r\n          params: { cardNumber: cardNumber, reCardNumber: cardNumber },\r\n        }\r\n      );\r\n      setBalanceResponse(response.data);\r\n      setIsOpen(true);\r\n    }\r\n  };\r\n\r\n  const cardNumberChangeHandler: React.ChangeEventHandler<HTMLInputElement> = (\r\n    event\r\n  ) => {\r\n    setCardNumber(event.target.value);\r\n    setIsCardNumberValid(\r\n      event.target.value.trim().length === 9 &&\r\n        isFinite(parseInt(event.target.value))\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getCardNumberFromStorage = () => {\r\n      const cardFromStorage: any = localStorage.getItem(\"cardNumber\")\r\n        ? JSON.parse(localStorage.getItem(\"cardNumber\") as any)\r\n        : null;\r\n      setCardNumber(cardFromStorage);\r\n      setIsCardNumberValid(\r\n        cardFromStorage &&\r\n          cardFromStorage.trim().length === 9 &&\r\n          isFinite(parseInt(cardFromStorage))\r\n      );\r\n    };\r\n    getCardNumberFromStorage();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Flex\r\n        align={\"center\"}\r\n        justify={\"center\"}\r\n        bg={useColorModeValue(\"gray.50\", \"gray.800\")}\r\n      >\r\n        <Stack spacing={8} mx={\"auto\"} maxW={\"lg\"} py={12} px={6}>\r\n          <Stack align={\"center\"}>\r\n            <Heading fontSize={\"4xl\"}>\r\n              See Your {\" \"}\r\n              <Text as={\"span\"} color={\"green.400\"}>\r\n                 Balance\r\n              </Text>\r\n            </Heading>\r\n          </Stack>\r\n          <Box\r\n            rounded={\"lg\"}\r\n            bg={useColorModeValue(\"white\", \"gray.700\")}\r\n            boxShadow={\"lg\"}\r\n            p={8}\r\n          >\r\n            <Stack spacing={4}>\r\n              <FormControl>\r\n                <FormLabel>Card Number</FormLabel>\r\n                <Input\r\n                  type=\"text\"\r\n                  isInvalid={!isCardNumberValid}\r\n                  value={cardNumber}\r\n                  placeholder={\"Enter Card Number\"}\r\n                  onChange={cardNumberChangeHandler}\r\n                />\r\n              </FormControl>\r\n              <Stack spacing={10}>\r\n                <Button\r\n                  type=\"submit\"\r\n                  disabled={!isCardNumberValid}\r\n                  onClick={submitHandler}\r\n                  bg={\"blue.400\"}\r\n                  color={\"white\"}\r\n                  _hover={{\r\n                    bg: \"blue.500\",\r\n                  }}\r\n                >\r\n                  Check Balance\r\n                </Button>\r\n              </Stack>\r\n            </Stack>\r\n          </Box>\r\n        </Stack>\r\n      </Flex>\r\n      {balanceResponse && (\r\n        <Card\r\n          isOpen={isOpen}\r\n          onModalClose={onModalCloseHandler}\r\n          onClose={onClose}\r\n          cardNumber={cardNumber}\r\n          response={balanceResponse}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","/* eslint-disable react-hooks/rules-of-hooks */\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Text,\r\n  useBreakpointValue,\r\n  useColorModeValue,\r\n} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { ColorModeSwitcher } from \"../../ColorModeSwitcher\";\r\n\r\nconst Header: React.FC = (props) => {\r\n  return (\r\n    <Box>\r\n      <Flex\r\n        bg={useColorModeValue(\"white\", \"gray.800\")}\r\n        color={useColorModeValue(\"gray.600\", \"white\")}\r\n        minH={\"60px\"}\r\n        py={{ base: 2 }}\r\n        px={{ base: 4 }}\r\n        borderBottom={1}\r\n        borderStyle={\"solid\"}\r\n        borderColor={useColorModeValue(\"gray.200\", \"gray.900\")}\r\n        align={\"center\"}\r\n      >\r\n        <Text\r\n          textAlign={useBreakpointValue({ base: \"center\", md: \"left\" })}\r\n          fontFamily={\"heading\"}\r\n          color={useColorModeValue(\"gray.800\", \"white\")}\r\n        >\r\n          Kolkata Metro Buddy\r\n        </Text>\r\n        <ColorModeSwitcher justifySelf=\"flex-end\" />\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { ChakraProvider, theme } from \"@chakra-ui/react\";\r\nimport * as React from \"react\";\r\nimport Form from \"./components/Form/Form\";\r\nimport Header from \"./components/Header/Header\";\r\n\r\nconst App: React.FunctionComponent = () => (\r\n  <ChakraProvider theme={theme}>\r\n    <Header />\r\n    <Form />\r\n  </ChakraProvider>\r\n);\r\n\r\nexport default App;\r\n","import { ColorModeScript } from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}